--- 
apiVersion: v1
kind: Template
labels: 
  group: cicd
  template: cicd
message: |-
    Use the following credentials for login:
    Jenkins: use your OpenShift credentials
    Nexus: admin/admin123
    SonarQube: admin/admin
    Gogs Git Server: gogs/gogs
metadata: 
  annotations: 
    iconClass: icon-jenkins
    tags: "instant-app,jenkins,gogs,nexus,cicd"
  name: cicd
objects: 
  - 
    apiVersion: v1
    groupNames: ~
    kind: RoleBinding
    metadata: 
      name: default_admin
    roleRef: 
      name: admin
    subjects: 
      - 
        kind: ServiceAccount
        name: default
  - 
    apiVersion: v1
    kind: BuildConfig
    metadata: 
      annotations: 
        pipeline.alpha.openshift.io/uses: "[{\"name\": \"jenkins\", \"namespace\": \"\", \"kind\": \"DeploymentConfig\"}]"
      labels: 
        app: cicd-pipeline
        name: cicd-pipeline
      name: tasks-pipeline
    spec: 
      runPolicy: Serial
      source: 
        type: None
      strategy: 
        jenkinsPipelineStrategy: 
          env: 
            - 
              name: DEMO_PROJECT
              value: "${DEMO_PROJECT}"
          jenkinsfile: |-
              def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
              pipeline {
                agent {
                  label 'maven'
                }
                stages {
                  stage('Build App') {
                    steps {
                      git branch: 'master', url: 'https://github.com/rohiddev/dockerspring.git'
                      sh "${mvnCmd} install -DskipTests=true"
                    }
                  }
                  stage('Code Analysis') {
                    steps {
                      script {
                        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                      }
                    }
                  }
                  stage('Archive App') {
                    steps {
                      sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                    }
                  }
                  stage('Build Image') {
                    steps {
                      sh "cp target/app.jar target/application.jar"
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEMO_PROJECT) {
                            openshift.selector("bc", "tasks").startBuild("--from-file=target/application.jar", "--wait=true")
                          }
                        }
                      }
                    }
                  }
                  stage('Deploy DEMO') {
                    steps {
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEMO_PROJECT) {
                            openshift.selector("dc", "tasks").rollout().latest();
                          }
                        }
                      }
                    }
                   }
                }
              }
        type: JenkinsPipeline
      triggers: 
        - 
          github: 
            secret: "${WEBHOOK_SECRET}"
          type: GitHub
        - 
          generic: 
            secret: "${WEBHOOK_SECRET}"
          type: Generic
  - 
    apiVersion: v1
    data: 
      maven-template: |-
          <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
            <inheritFrom></inheritFrom>
            <name>maven</name>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <instanceCap>2147483647</instanceCap>
            <idleMinutes>0</idleMinutes>
            <label>maven</label>
            <serviceAccount>jenkins</serviceAccount>
            <nodeSelector></nodeSelector>
            <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
            <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
              <memory>false</memory>
            </workspaceVolume>
            <volumes />
            <containers>
              <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
                <name>jnlp</name>
                <image>openshift/jenkins-agent-maven-35-centos7</image>
                <privileged>false</privileged>
                <alwaysPullImage>false</alwaysPullImage>
                <workingDir>/tmp</workingDir>
                <command></command>
                <args>${computer.jnlpmac} ${computer.name}</args>
                <ttyEnabled>false</ttyEnabled>
                <resourceRequestCpu>200m</resourceRequestCpu>
                <resourceRequestMemory>512Mi</resourceRequestMemory>
                <resourceLimitCpu>2</resourceLimitCpu>
                <resourceLimitMemory>4Gi</resourceLimitMemory>
                <envVars/>
              </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            </containers>
            <envVars/>
            <annotations/>
            <imagePullSecrets/>
          </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    kind: ConfigMap
    metadata: 
      labels: 
        app: cicd-pipeline
        role: jenkins-slave
      name: jenkins-slaves
  - 
    apiVersion: batch/v1
    kind: Job
    metadata: 
      name: cicd-demo-installer
    spec: 
      activeDeadlineSeconds: 400
      completions: 1
      parallelism: 1
      template: 
        spec: 
          containers: 
            - 
              command: 
                - /bin/bash
                - "-x"
                - "-c"
                - |
                    # adjust jenkins 
                    oc new-app jenkins-ephemeral
                    oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi 
                    oc label dc jenkins app=jenkins --overwrite 
                    # setup demo env
                    #oc import-image java:8 --from=java:8 --confirm -n ${DEMO_PROJECT} 
                    # demo
                    oc new-build --name=tasks --image-stream=java:latest --binary=true -n ${DEMO_PROJECT}
                  
                    oc new-app tasks:latest --allow-missing-images --allow-missing-imagestream-tags -n ${DEMO_PROJECT}
                    oc set triggers dc -l app=tasks --containers=tasks --from-image=tasks:latest --manual -n ${DEMO_PROJECT}
                      
                    # demo project
                    oc expose dc/tasks --port=8085 -n ${DEMO_PROJECT}
                    oc expose svc/tasks -n ${DEMO_PROJECT}
                    # deploy gogs
                    HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${DEMO_NAMESPACE}.//g")
                    GOGS_HOSTNAME="gogs-$DEMO_NAMESPACE.$HOSTNAME"
                    if [ "${EPHEMERAL}" == "true" ] ; then
                      oc new-app -f https://raw.githubusercontent.com/siamaksade/gogs/master/gogs-template-ephemeral.yaml \
                          --param=GOGS_VERSION=0.11.34 \
                          --param=DATABASE_VERSION=9.6 \
                          --param=HOSTNAME=$GOGS_HOSTNAME \
                          --param=SKIP_TLS_VERIFY=true
                    else
                      oc new-app -f https://raw.githubusercontent.com/siamaksade/gogs/master/gogs-template.yaml \
                          --param=GOGS_VERSION=0.11.34 \
                          --param=DATABASE_VERSION=9.6 \
                          --param=HOSTNAME=$GOGS_HOSTNAME \
                          --param=SKIP_TLS_VERIFY=true
                    fi
                    sleep 5
                    if [ "${EPHEMERAL}" == "true" ] ; then
                      oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=2Gi
                    else
                      oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-persistent-template.yml --param=SONARQUBE_MEMORY_LIMIT=2Gi
                    fi
                    oc set resources dc/sonardb --limits=cpu=200m,memory=512Mi --requests=cpu=50m,memory=128Mi
                    oc set resources dc/sonarqube --limits=cpu=1,memory=2Gi --requests=cpu=50m,memory=128Mi
                    if [ "${EPHEMERAL}" == "true" ] ; then
                      oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
                    else
                      oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
                    fi
                    oc set resources dc/nexus --requests=cpu=200m --limits=cpu=2
                    GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
                    GOGS_USER=gogs
                    GOGS_PWD=gogs
                    oc rollout status dc gogs
                    oc expose svc gogs
                    # Even though the rollout is complete gogs isn't always ready to create the admin user
                    sleep 10
                    # Try 10 times to create the admin user. Fail after that.
                    for i in {1..10};
                    do
                      _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
                        --form user_name=$GOGS_USER \
                        --form password=$GOGS_PWD \
                        --form retype=$GOGS_PWD \
                        --form email=admin@gogs.com)
                      if [ $_RETURN == "200" ] || [ $_RETURN == "302" ]
                      then
                        echo "SUCCESS: Created gogs admin user"
                        break
                      elif [ $_RETURN != "200" ] && [ $_RETURN != "302" ] && [ $i == 10 ]; then
                        echo "ERROR: Failed to create Gogs admin"
                        cat /tmp/curl.log
                        exit 255
                      fi
                      # Sleep between each attempt
                      sleep 10
                    done
                    cat <<EOF > /tmp/data.json
                    {
                      "clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git",
                      "uid": 1,
                      "repo_name": "openshift-tasks"
                    }
                    EOF
                    _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
                    -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)
                    if [ $_RETURN != "201" ] ;then
                      echo "ERROR: Failed to import openshift-tasks GitHub repo"
                      cat /tmp/curl.log
                      exit 255
                    fi
                    sleep 5
                    cat <<EOF > /tmp/data.json
                    {
                      "type": "gogs",
                      "config": {
                        "url": "https://openshift.default.svc.cluster.local/apis/build.openshift.io/v1/namespaces/$DEMO_NAMESPACE/buildconfigs/tasks-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                        "content_type": "json"
                      },
                      "events": [
                        "push"
                      ],
                      "active": true
                    }
                    EOF
                    _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
                    -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)
                    if [ $_RETURN != "201" ] ; then
                      echo "ERROR: Failed to set webhook"
                      cat /tmp/curl.log
                      exit 255
                    fi
                    oc label dc sonarqube "app.kubernetes.io/part-of"="sonarqube" --overwrite
                    oc label dc sonardb "app.kubernetes.io/part-of"="sonarqube" --overwrite
                    oc label dc jenkins "app.kubernetes.io/part-of"="jenkins" --overwrite
                    oc label dc nexus "app.kubernetes.io/part-of"="nexus" --overwrite
                    oc label dc gogs "app.kubernetes.io/part-of"="gogs" --overwrite
                    oc label dc gogs-postgresql "app.kubernetes.io/part-of"="gogs" --overwrite
                    # Cleanup
                    # oc delete all --all
                    # oc delete rolebindig default_admin jenkins_edit
                    # oc delete sa gogs jenkins
                    # oc delete configmap gogs-config jenkins-slaves
              env: 
                - 
                  name: DEMO_NAMESPACE
                  valueFrom: 
                    fieldRef: 
                      fieldPath: metadata.namespace
              image: "quay.io/openshift/origin-cli:v4.0"
              name: cicd-demo-installer-job
              resources: {}
              terminationMessagePath: /demo/termination-log
              terminationMessagePolicy: File
          restartPolicy: Never
parameters: 
  - 
    displayName: "DEMO project name"
    name: DEMO_PROJECT
    required: true
    value: demo
  - 
    description: "Use no persistent storage for Gogs and Nexus"
    displayName: Ephemeral
    name: EPHEMERAL
    required: true
    value: "true"
  - 
    description: "Webhook secret"
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: WEBHOOK_SECRET
    required: true

